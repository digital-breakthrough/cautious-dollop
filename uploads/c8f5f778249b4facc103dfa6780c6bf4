const partition = (arr, lowIdx, highIdx, condition) => {
    const pivotPosition = Math.floor(Math.random() * (highIdx - lowIdx + 1)) + lowIdx;
    const pivot = arr[pivotPosition];
    while (highIdx >= lowIdx) {
        while (condition(arr[highIdx], pivot)) {
            highIdx--;
        }
        while (condition(pivot, arr[lowIdx])) {
            lowIdx++;
        }
        if (highIdx >= lowIdx) {
            const tmp = arr[lowIdx];
            arr[lowIdx] = arr[highIdx];
            arr[highIdx] = tmp;
            highIdx--;
            lowIdx++;
        }
    }
    return lowIdx;
};

/**
 * Default sort for custome quickSort implementation
 * @param {*} a 
 * @param {*} b 
 */
const defaultSort = (a, b) => a > b;

/**
 * QuickSort implemention
 * @param {Array} arr 
 * @param {Number} lowIdx 
 * @param {Number} highIdx 
 * @param {Function} condition 
 */
const quickSort = async (arr, lowIdx, highIdx, condition = defaultSort) => {
    if (lowIdx < highIdx) {
        const index = partition(arr, lowIdx, highIdx, condition);
        await quickSort(arr, lowIdx, index - 1, condition);
        await quickSort(arr, index, highIdx, condition);
    }
    return arr;
};

module.exports = quickSort;
